plugins {
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'idea'
    id 'org.flywaydb.flyway' version '9.21.1'
    id 'com.diffplug.spotless' version '6.20.0'
    id 'groovy'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    compileOnly('org.projectlombok:lombok:1.18.28')
    compileOnly('com.querydsl:querydsl-apt:5.0.0:jakarta')
    annotationProcessor('org.projectlombok:lombok:1.18.28')
    annotationProcessor('org.mapstruct:mapstruct-processor:1.5.5.Final')
    annotationProcessor('com.querydsl:querydsl-apt:5.0.0:jakarta')
    annotationProcessor('jakarta.persistence:jakarta.persistence-api:3.1.0')

    developmentOnly('org.springframework.boot:spring-boot-docker-compose')
    implementation('org.springframework.boot:spring-boot-starter')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0')

    implementation('org.flywaydb:flyway-core')
    implementation('org.flywaydb:flyway-mysql')
    implementation('org.mapstruct:mapstruct:1.5.5.Final')
    implementation('org.apache.commons:commons-collections4:4.4')
    implementation('org.apache.commons:commons-lang3')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2')
    implementation('com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5')
    implementation('com.querydsl:querydsl-jpa:5.0.0:jakarta')
    implementation('com.diffplug.spotless:spotless-plugin-gradle:6.20.0')

    runtimeOnly('com.mysql:mysql-connector-j:8.1.0')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.rest-assured:rest-assured:5.3.1') {
        exclude group: 'org.apache.groovy', module: 'groovy-xml'
    }
    testImplementation('io.rest-assured:spring-mock-mvc:5.3.1') {
        exclude group: 'org.apache.groovy', module: 'groovy-xml'
    }
    testImplementation('com.github.springtestdbunit:spring-test-dbunit:1.3.0')
    testImplementation('org.dbunit:dbunit:2.7.0')
    testImplementation('org.spockframework:spock-core:2.4-M1-groovy-4.0')
    testImplementation('org.assertj:assertj-core:3.24.2')
}

apply from: "${rootProject.projectDir}/gradle/integration-test.gradle"
apply from: "${rootProject.projectDir}/gradle/spotless.gradle"

jacoco {
    toolVersion = "0.8.9"
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

jacocoTestCoverageVerification {
    executionData(test, integrationTest)
    dependsOn(test, integrationTest)
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

tasks.register('jacocoIntegrationTestReport', JacocoReport) {
    executionData integrationTest
    dependsOn integrationTest
    reports {
        html.required.set(true)
    }

    sourceDirectories.setFrom sourceSets.main.java.srcDirs
    classDirectories.setFrom files(sourceSets.main.output.classesDirs.collect {
        fileTree(dir: it, includes: ['**/*Controller.class'])
    })
}

jacocoTestReport {
    executionData test
    dependsOn test
    reports {
        html.required.set(true)
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    excludes: ['**/config/**',
                               '**/assember/**',
                               '**/exception/**',
                               '**/entity/**',
                               '**/vo/**',
                               '**/SpringBaseApplication*',
                               '**/*Mapper*',
                               '**/Jpa*Repository',
                               '**/*Controller.class'
                    ])
        }))
    }
}

tasks.check {
    dependsOn("jacocoTestReport", "jacocoIntegrationTestReport")
}

test {
    useJUnitPlatform()
}
